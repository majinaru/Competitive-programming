#include <bits/stdc++.h>
#include <cstdint>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
#define endl '\n'
using ll = long long;
#define int ll
using namespace __gnu_pbds;
template <typename T>
using ordered_set =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T, typename U>
using ordered_map = tree<T, U, less<T>, rb_tree_tag, tree_order_statistics_node_update>;


int s1, s2;
int n, k;
ordered_set<pair<int,int>> st;

void dec(int element, int pos){
        pair<int,int> aux = {element, pos};

        if(aux <= *st.find_by_order((st.size()+1)/2-1))
            s1-= element;
        else
            s2-= element;

        st.erase({element, pos});
}

void inc(int element, int pos){

    pair<int,int> aux = {element, pos};

    pair<int,int> Mlast = *(st.find_by_order((st.size()+1)/2-1));
    st.insert({element, pos});
    pair<int,int> Mnovo = *(st.find_by_order((st.size()+1)/2-1));

    if(aux < Mnovo){
        s1+= element;
    }
    else{
        s2+= element;
    }

    if(Mnovo != Mlast){
        if(Mnovo.first > Mlast.first){
            s1+=  Mnovo.first;
            s2-= Mnovo.first;
        }
        else{
            s1-= Mlast.first;
            s1+= Mnovo.first;
            s2+= Mlast.first;
        }
    }

}

void solve() {
    cin >> n >> k;
    vector<int> vt(n);

    for(int i = 0; i < n; i++){
        cin >> vt[i];

        if(k>i)
            st.insert({vt[i], i});
    }

    s1 = 0;
    s2 = 0;

    int cont = 0;
    for(auto v: st){
        if(cont <= k/2){
            s1+= v.first;
        }
        else{
            s2+= v.first;
        }
        cont++;
    }

    for(int i = k; i < n ;i++){
        cout << s2 - s1 + st.find_by_order((st.size()+1)/2-1)->first<< " ";

        dec(vt[i-k], i-k);
        inc(vt[i], i);
    }
    cout << endl;
    for(auto[v,x]: st) cout << v << endl;
    cout << s1 << ' ' << s2 << endl;
    cout << s2 - s1 + st.find_by_order((st.size()+1)/2-1)->first << endl;

}

int32_t main() {
    cin.tie(0)->sync_with_stdio(0);
    solve();
}
